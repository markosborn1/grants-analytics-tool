import React, { useState } from 'react';

const App = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isEditing, setIsEditing] = useState(false);
  
  const [metrics, setMetrics] = useState({
    applications: 312,
    approvalRate: 28.5,
    avgAmount: 18750,
    processingTime: 18
  });

  const [pipeline, setPipeline] = useState([
    { stage: 'Announcement Planning', value: 100 },
    { stage: 'Announcement Development', value: 85 },
    { stage: 'Submissions', value: 312 },
    { stage: 'Selections', value: 89 }
  ]);

  const updateMetric = (key, value) => {
    setMetrics(prev => ({ ...prev, [key]: parseFloat(value) || 0 }));
  };

  const updatePipeline = (index, value) => {
    setPipeline(prev => prev.map((item, i) => 
      i === index ? { ...item, value: parseInt(value) || 0 } : item
    ));
  };

  const generateReport = () => {
    const reportContent = `GRANTS ANALYTICS REPORT
Generated: ${new Date().toLocaleDateString()}

METRICS SUMMARY
===============
Applications This Month: ${metrics.applications}
Approval Rate: ${metrics.approvalRate}%
Average Grant Amount: $${metrics.avgAmount.toLocaleString()}
Processing Time: ${metrics.processingTime} days

PIPELINE STATUS
===============
${pipeline.map(item => `${item.stage}: ${item.value}`).join('\n')}

Generated by Grants Analytics Platform`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'Grants_Report.txt';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    
    alert('Report downloaded successfully!');
  };

  const Dashboard = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Grants Analytics Dashboard</h2>
        <button
          onClick={() => setIsEditing(!isEditing)}
          className={`px-4 py-2 rounded text-white ${
            isEditing ? 'bg-green-600' : 'bg-blue-600'
          }`}
        >
          {isEditing ? 'Save Changes' : 'Edit Mode'}
        </button>
      </div>

      {isEditing && (
        <div className="bg-yellow-100 border border-yellow-300 rounded p-4">
          <p className="text-yellow-800">Edit Mode: Click values to modify them</p>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-white p-6 rounded-lg shadow border">
          <p className="text-sm text-gray-600">Applications This Month</p>
          {isEditing ? (
            <input
              type="number"
              value={metrics.applications}
              onChange={(e) => updateMetric('applications', e.target.value)}
              className="text-2xl font-bold border rounded px-2 py-1 w-full"
            />
          ) : (
            <p className="text-2xl font-bold">{metrics.applications}</p>
          )}
          <p className="text-sm text-green-600">+23.4% vs last month</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border">
          <p className="text-sm text-gray-600">Approval Rate</p>
          {isEditing ? (
            <input
              type="number"
              value={metrics.approvalRate}
              onChange={(e) => updateMetric('approvalRate', e.target.value)}
              className="text-2xl font-bold border rounded px-2 py-1 w-full"
              step="0.1"
            />
          ) : (
            <p className="text-2xl font-bold">{metrics.approvalRate}%</p>
          )}
          <p className="text-sm text-green-600">+2.1% vs last month</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border">
          <p className="text-sm text-gray-600">Avg. Grant Amount</p>
          {isEditing ? (
            <input
              type="number"
              value={metrics.avgAmount}
              onChange={(e) => updateMetric('avgAmount', e.target.value)}
              className="text-2xl font-bold border rounded px-2 py-1 w-full"
              step="100"
            />
          ) : (
            <p className="text-2xl font-bold">${metrics.avgAmount.toLocaleString()}</p>
          )}
          <p className="text-sm text-blue-600">+5.2% vs last month</p>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border">
          <p className="text-sm text-gray-600">Processing Time</p>
          {isEditing ? (
            <input
              type="number"
              value={metrics.processingTime}
              onChange={(e) => updateMetric('processingTime', e.target.value)}
              className="text-2xl font-bold border rounded px-2 py-1 w-full"
            />
          ) : (
            <p className="text-2xl font-bold">{metrics.processingTime} days</p>
          )}
          <p className="text-sm text-red-600">+3 days vs target</p>
        </div>
      </div>

      <div className="bg-white p-6 rounded-lg shadow border">
        <h3 className="text-lg font-semibold mb-4">Grants Program Pipeline</h3>
        <div className="space-y-4">
          {pipeline.map((item, index) => (
            <div key={index} className="flex items-center justify-between">
              <span className="font-medium">{item.stage}</span>
              <div className="flex items-center gap-4">
                {isEditing ? (
                  <input
                    type="number"
                    value={item.value}
                    onChange={(e) => updatePipeline(index, e.target.value)}
                    className="border rounded px-2 py-1 w-20"
                  />
                ) : (
                  <span className="font-bold">{item.value}</span>
                )}
                <div className="w-48 bg-gray-200 rounded-full h-4">
                  <div
                    className="bg-blue-600 h-4 rounded-full"
                    style={{ width: `${Math.min((item.value / 312) * 100, 100)}%` }}
                  ></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg shadow border">
          <h3 className="text-lg font-semibold mb-4">Monthly Applications</h3>
          <div className="space-y-2">
            {['Jan: 156', 'Feb: 189', 'Mar: 234', 'Apr: 198', 'May: 267', `Jun: ${metrics.applications}`].map((item, index) => (
              <div key={index} className="flex justify-between">
                <span>{item.split(':')[0]}</span>
                <span className="font-bold">{item.split(':')[1]}</span>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border">
          <h3 className="text-lg font-semibold mb-4">Funding by Category</h3>
          <div className="space-y-2">
            <div className="flex justify-between">
              <span>NOFO</span>
              <span className="font-bold">$3.2M</span>
            </div>
            <div className="flex justify-between">
              <span>NOTA Lab Call</span>
              <span className="font-bold">$1.85M</span>
            </div>
            <div className="flex justify-between">
              <span>TPL</span>
              <span className="font-bold">$1.45M</span>
            </div>
            <div className="flex justify-between">
              <span>PIA</span>
              <span className="font-bold">$1.1M</span>
            </div>
            <div className="flex justify-between">
              <span>Prize</span>
              <span className="font-bold">$750K</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const Metrics = () => {
    const [metricsEditMode, setMetricsEditMode] = useState(false);
    const [insights, setInsights] = useState([
      {
        id: 1,
        title: 'High Application Volume',
        finding: 'Receiving 312 applications (25% above target of 250)',
        action: 'Consider increasing review team capacity',
        priority: 'medium'
      },
      {
        id: 2,
        title: 'Below Target Approval Rate',
        finding: 'Current approval rate of 28.5% is below target of 30%',
        action: 'Review selection criteria and provide applicant guidance',
        priority: 'high'
      },
      {
        id: 3,
        title: 'Processing Time Exceeds Target',
        finding: 'Average processing time of 18 days exceeds target of 15 days',
        action: 'Streamline review process and add more reviewers',
        priority: 'high'
      }
    ]);

    const [quickWins, setQuickWins] = useState([
      {
        id: 1,
        title: 'Add Progress Indicators',
        description: 'Could improve completion rate by 15-20%',
        difficulty: 'easy'
      },
      {
        id: 2,
        title: 'Standardize Review Templates',
        description: 'Reduce processing time variation',
        difficulty: 'moderate'
      }
    ]);

    const updateInsight = (id, field, value) => {
      setInsights(prev => prev.map(insight => 
        insight.id === id ? { ...insight, [field]: value } : insight
      ));
    };

    const updateQuickWin = (id, field, value) => {
      setQuickWins(prev => prev.map(win => 
        win.id === id ? { ...win, [field]: value } : win
      ));
    };

    const addInsight = () => {
      const newInsight = {
        id: Math.max(...insights.map(i => i.id)) + 1,
        title: 'New Insight',
        finding: 'Enter your finding here',
        action: 'Enter recommended action',
        priority: 'medium'
      };
      setInsights(prev => [...prev, newInsight]);
    };

    const addQuickWin = () => {
      const newWin = {
        id: Math.max(...quickWins.map(w => w.id)) + 1,
        title: 'New Quick Win',
        description: 'Enter description here',
        difficulty: 'easy'
      };
      setQuickWins(prev => [...prev, newWin]);
    };

    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className="text-2xl font-bold">Grant Metrics Intelligence</h2>
          <div className="flex gap-2">
            <button 
              onClick={() => setMetricsEditMode(!metricsEditMode)}
              className={`px-4 py-2 rounded-lg ${
                metricsEditMode ? 'bg-green-600 text-white' : 'bg-orange-600 text-white'
              }`}
            >
              {metricsEditMode ? 'Save Changes' : 'Edit Mode'}
            </button>
            <button 
              onClick={generateReport}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
            >
              Generate Report
            </button>
          </div>
        </div>

        {metricsEditMode && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-medium text-yellow-800 mb-2">Edit Mode Active</h4>
            <p className="text-sm text-yellow-700">Click on text to edit insights and recommendations. Add new items with the + buttons.</p>
          </div>
        )}

        <div className="bg-white p-6 rounded-lg shadow border">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold">Key Insights & Recommended Actions</h3>
            {metricsEditMode && (
              <button
                onClick={addInsight}
                className="bg-blue-600 text-white px-3 py-1 rounded text-sm"
              >
                + Add Insight
              </button>
            )}
          </div>
          <div className="space-y-4">
            {insights.map((insight) => (
              <div key={insight.id} className={`border-l-4 p-4 rounded ${
                insight.priority === 'high' ? 'border-red-500 bg-red-50' :
                insight.priority === 'medium' ? 'border-yellow-500 bg-yellow-50' :
                'border-green-500 bg-green-50'
              }`}>
                <div className="flex justify-between items-start mb-2">
                  {metricsEditMode ? (
                    <input
                      type="text"
                      value={insight.title}
                      onChange={(e) => updateInsight(insight.id, 'title', e.target.value)}
                      className="font-semibold text-gray-900 bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none"
                    />
                  ) : (
                    <h4 className="font-semibold text-gray-900">{insight.title}</h4>
                  )}
                  {metricsEditMode ? (
                    <select
                      value={insight.priority}
                      onChange={(e) => updateInsight(insight.id, 'priority', e.target.value)}
                      className="px-2 py-1 text-xs rounded border"
                    >
                      <option value="high">HIGH PRIORITY</option>
                      <option value="medium">MEDIUM PRIORITY</option>
                      <option value="low">LOW PRIORITY</option>
                    </select>
                  ) : (
                    <span className={`px-2 py-1 text-xs rounded ${
                      insight.priority === 'high' ? 'bg-red-100 text-red-800' :
                      insight.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-green-100 text-green-800'
                    }`}>
                      {insight.priority.toUpperCase()} PRIORITY
                    </span>
                  )}
                </div>
                <div className="space-y-2">
                  <div>
                    <strong>Finding: </strong>
                    {metricsEditMode ? (
                      <input
                        type="text"
                        value={insight.finding}
                        onChange={(e) => updateInsight(insight.id, 'finding', e.target.value)}
                        className="bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none w-full"
                      />
                    ) : (
                      <span className="text-sm text-gray-700">{insight.finding}</span>
                    )}
                  </div>
                  <div>
                    <strong>Recommended Action: </strong>
                    {metricsEditMode ? (
                      <input
                        type="text"
                        value={insight.action}
                        onChange={(e) => updateInsight(insight.id, 'action', e.target.value)}
                        className="bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none w-full"
                      />
                    ) : (
                      <span className="text-sm text-gray-700">{insight.action}</span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white p-6 rounded-lg shadow border">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Quick Wins</h3>
              {metricsEditMode && (
                <button
                  onClick={addQuickWin}
                  className="bg-blue-600 text-white px-3 py-1 rounded text-sm"
                >
                  + Add Quick Win
                </button>
              )}
            </div>
            <div className="space-y-3">
              {quickWins.map((win) => (
                <div key={win.id} className={`border rounded p-3 ${
                  win.difficulty === 'easy' ? 'border-green-200 bg-green-50' :
                  win.difficulty === 'moderate' ? 'border-yellow-200 bg-yellow-50' :
                  'border-red-200 bg-red-50'
                }`}>
                  {metricsEditMode ? (
                    <input
                      type="text"
                      value={win.title}
                      onChange={(e) => updateQuickWin(win.id, 'title', e.target.value)}
                      className={`font-medium bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none w-full ${
                        win.difficulty === 'easy' ? 'text-green-800' :
                        win.difficulty === 'moderate' ? 'text-yellow-800' :
                        'text-red-800'
                      }`}
                    />
                  ) : (
                    <h4 className={`font-medium ${
                      win.difficulty === 'easy' ? 'text-green-800' :
                      win.difficulty === 'moderate' ? 'text-yellow-800' :
                      'text-red-800'
                    }`}>{win.title}</h4>
                  )}
                  {metricsEditMode ? (
                    <div className="mt-2 space-y-1">
                      <input
                        type="text"
                        value={win.description}
                        onChange={(e) => updateQuickWin(win.id, 'description', e.target.value)}
                        className={`text-sm bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none w-full ${
                          win.difficulty === 'easy' ? 'text-green-700' :
                          win.difficulty === 'moderate' ? 'text-yellow-700' :
                          'text-red-700'
                        }`}
                      />
                      <select
                        value={win.difficulty}
                        onChange={(e) => updateQuickWin(win.id, 'difficulty', e.target.value)}
                        className="text-xs px-2 py-1 rounded border"
                      >
                        <option value="easy">EASY IMPLEMENTATION</option>
                        <option value="moderate">MODERATE EFFORT</option>
                        <option value="hard">HIGH EFFORT</option>
                      </select>
                    </div>
                  ) : (
                    <div>
                      <p className={`text-sm mb-2 ${
                        win.difficulty === 'easy' ? 'text-green-700' :
                        win.difficulty === 'moderate' ? 'text-yellow-700' :
                        'text-red-700'
                      }`}>{win.description}</p>
                      <span className={`text-xs px-2 py-1 rounded ${
                        win.difficulty === 'easy' ? 'bg-green-200 text-green-800' :
                        win.difficulty === 'moderate' ? 'bg-yellow-200 text-yellow-800' :
                        'bg-red-200 text-red-800'
                      }`}>
                        {win.difficulty === 'easy' ? 'EASY IMPLEMENTATION' :
                         win.difficulty === 'moderate' ? 'MODERATE EFFORT' : 'HIGH EFFORT'}
                      </span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow border">
            <h3 className="text-lg font-semibold mb-4">Performance Summary</h3>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span>Applications Volume</span>
                <span className="text-green-600 font-bold">Above Target</span>
              </div>
              <div className="flex justify-between">
                <span>Approval Rate</span>
                <span className="text-yellow-600 font-bold">Below Target</span>
              </div>
              <div className="flex justify-between">
                <span>Processing Time</span>
                <span className="text-red-600 font-bold">Above Target</span>
              </div>
              <div className="flex justify-between">
                <span>Fund Utilization</span>
                <span className="text-green-600 font-bold">Excellent</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const Review = () => {
    const [reviewEditMode, setReviewEditMode] = useState(false);
    const [selectedQuarter, setSelectedQuarter] = useState('Q3 2025 (Current)');
    
    const [reviewData, setReviewData] = useState({
      summary: 'Grant applications increased by 35% this quarter, with NOFO and TPL leading demand. New review process reduced average decision time from 25 to 18 days while maintaining quality standards.',
      achievements: [
        {
          id: 1,
          title: 'Application Growth',
          description: '35% increase in applications this quarter'
        },
        {
          id: 2,
          title: 'Process Improvement',
          description: 'Reduced decision time from 25 to 18 days'
        },
        {
          id: 3,
          title: 'Fund Utilization',
          description: '94% of available funds allocated effectively'
        }
      ],
      impactData: [
        { metric: 'Projects Funded', value: '387' },
        { metric: 'Total Impact Value', value: '$24.7M' },
        { metric: 'Beneficiaries Reached', value: '156,000+' }
      ]
    });

    const updateSummary = (value) => {
      setReviewData(prev => ({ ...prev, summary: value }));
    };

    const updateAchievement = (id, field, value) => {
      setReviewData(prev => ({
        ...prev,
        achievements: prev.achievements.map(achievement => 
          achievement.id === id ? { ...achievement, [field]: value } : achievement
        )
      }));
    };

    const updateImpactData = (index, field, value) => {
      setReviewData(prev => ({
        ...prev,
        impactData: prev.impactData.map((item, i) => 
          i === index ? { ...item, [field]: value } : item
        )
      }));
    };

    const addAchievement = () => {
      const newAchievement = {
        id: Math.max(...reviewData.achievements.map(a => a.id)) + 1,
        title: 'New Achievement',
        description: 'Enter description here'
      };
      setReviewData(prev => ({
        ...prev,
        achievements: [...prev.achievements, newAchievement]
      }));
    };

    const addImpactMetric = () => {
      setReviewData(prev => ({
        ...prev,
        impactData: [...prev.impactData, { metric: 'New Metric', value: '0' }]
      }));
    };

    const quarterOptions = [
      'Q2 2025 (Previous)',
      'Q3 2025 (Current)',
      'Q4 2025 (Future)'
    ];

    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className="text-2xl font-bold">Quarterly Review</h2>
          <div className="flex gap-2">
            <select 
              value={selectedQuarter}
              onChange={(e) => setSelectedQuarter(e.target.value)}
              className="border rounded-lg px-3 py-2"
            >
              {quarterOptions.map(quarter => (
                <option key={quarter} value={quarter}>{quarter}</option>
              ))}
            </select>
            <button
              onClick={() => setReviewEditMode(!reviewEditMode)}
              className={`px-4 py-2 rounded-lg ${
                reviewEditMode ? 'bg-green-600 text-white' : 'bg-orange-600 text-white'
              }`}
            >
              {reviewEditMode ? 'Save Changes' : 'Edit Mode'}
            </button>
          </div>
        </div>

        {reviewEditMode && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-medium text-yellow-800 mb-2">Edit Mode Active</h4>
            <p className="text-sm text-yellow-700">Click on text to edit summary, achievements, and impact metrics. Add new items with the + buttons.</p>
          </div>
        )}

        <div className="bg-white p-6 rounded-lg shadow border">
          <h3 className="text-lg font-semibold mb-4">Executive Summary</h3>
          {reviewEditMode ? (
            <textarea 
              value={reviewData.summary}
              onChange={(e) => updateSummary(e.target.value)}
              className="w-full h-32 border rounded-lg p-3 focus:border-blue-500 outline-none"
              placeholder="Enter key highlights and insights from this quarter..."
            />
          ) : (
            <div className="p-3 bg-gray-50 rounded-lg">
              <p className="text-gray-700">{reviewData.summary}</p>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white p-6 rounded-lg shadow border">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Key Achievements</h3>
              {reviewEditMode && (
                <button
                  onClick={addAchievement}
                  className="bg-blue-600 text-white px-3 py-1 rounded text-sm"
                >
                  + Add Achievement
                </button>
              )}
            </div>
            <div className="space-y-3">
              {reviewData.achievements.map((achievement) => (
                <div key={achievement.id} className="border rounded p-3">
                  {reviewEditMode ? (
                    <div className="space-y-2">
                      <input
                        type="text"
                        value={achievement.title}
                        onChange={(e) => updateAchievement(achievement.id, 'title', e.target.value)}
                        className="font-medium bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none w-full"
                      />
                      <input
                        type="text"
                        value={achievement.description}
                        onChange={(e) => updateAchievement(achievement.id, 'description', e.target.value)}
                        className="text-sm text-gray-600 bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none w-full"
                      />
                    </div>
                  ) : (
                    <div>
                      <h4 className="font-medium">{achievement.title}</h4>
                      <p className="text-sm text-gray-600">{achievement.description}</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow border">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Impact Highlights</h3>
              {reviewEditMode && (
                <button
                  onClick={addImpactMetric}
                  className="bg-blue-600 text-white px-3 py-1 rounded text-sm"
                >
                  + Add Metric
                </button>
              )}
            </div>
            <div className="space-y-2">
              {reviewData.impactData.map((item, index) => (
                <div key={index} className="flex justify-between">
                  {reviewEditMode ? (
                    <>
                      <input
                        type="text"
                        value={item.metric}
                        onChange={(e) => updateImpactData(index, 'metric', e.target.value)}
                        className="bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none"
                      />
                      <input
                        type="text"
                        value={item.value}
                        onChange={(e) => updateImpactData(index, 'value', e.target.value)}
                        className="font-bold bg-transparent border-b border-gray-300 focus:border-blue-500 outline-none text-right"
                      />
                    </>
                  ) : (
                    <>
                      <span>{item.metric}</span>
                      <span className="font-bold">{item.value}</span>
                    </>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border">
          <h3 className="text-lg font-semibold mb-4">Quarterly Trends</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span>Application Volume Trend</span>
              <span className="text-green-600 font-bold">Increasing</span>
            </div>
            <div className="flex justify-between">
              <span>Approval Rate Trend</span>
              <span className="text-yellow-600 font-bold">Stable</span>
            </div>
            <div className="flex justify-between">
              <span>Processing Efficiency</span>
              <span className="text-green-600 font-bold">Improving</span>
            </div>
            <div className="flex justify-between">
              <span>Fund Distribution</span>
              <span className="text-green-600 font-bold">Optimized</span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return <Dashboard />;
      case 'metrics':
        return <Metrics />;
      case 'review':
        return <Review />;
      default:
        return <Dashboard />;
    }
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <h1 className="text-3xl font-bold text-gray-900">Grants Analytics Platform</h1>
            <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setActiveTab('dashboard')}
                className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'dashboard'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Dashboard
              </button>
              <button
                onClick={() => setActiveTab('metrics')}
                className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'metrics'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Metrics
              </button>
              <button
                onClick={() => setActiveTab('review')}
                className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'review'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Review
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {renderContent()}
      </div>
    </div>
  );
};

export default App;
